name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history is needed for versioning

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./...

      - name: Auto-generate tag
        id: tag
        run: |
          # Get the latest tag
          git fetch --prune --unshallow --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Get all commits since last tag
          commits=$(git log --pretty=format:"%s" $latest_tag..HEAD)
          
          # Count meaningful changes (excluding chore, ci, test, docs, etc)
          major_bump=$(echo "$commits" | grep -c "^[a-zA-Z]*!:")
          minor_bump=$(echo "$commits" | grep -c "^feat")
          patch_bump=$(echo "$commits" | grep -c "^fix")
          
          # Ignore these types of commits for version bumping
          ignored_commits=$(echo "$commits" | grep -cE "^(chore|ci|test|docs|style|refactor|perf):")
          total_commits=$(echo "$commits" | wc -l)
          meaningful_changes=$((total_commits - ignored_commits))
          
          # Extract current version numbers
          version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version"
          
          # Only bump version if there are meaningful changes
          if [ $meaningful_changes -gt 0 ]; then
            if [ $major_bump -gt 0 ]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [ $minor_bump -gt 0 ]; then
              minor=$((minor + 1))
              patch=0
            elif [ $patch_bump -gt 0 ]; then
              patch=$((patch + 1))
            fi
            
            new_tag="v$major.$minor.$patch"
            echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
            echo "Generated new tag: $new_tag"
            echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
          else
            echo "No meaningful changes detected, skipping release"
            echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create and push tag
        if: env.SHOULD_RELEASE == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}

      - name: Create Release with GoReleaser
        if: env.SHOULD_RELEASE == 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: v2.6.1
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 