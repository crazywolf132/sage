name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history is needed for versioning

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./...

      - name: Auto-generate tag
        id: tag
        run: |
          # Get the latest tag, if any
          git fetch --prune --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$latest_tag" ]; then
            echo "No tags found, starting from v0.0.0"
            # For first release, count all commits
            commits=$(git log --pretty=format:"%s")
            major=0
            minor=0
            patch=0
          else
            echo "Latest tag: $latest_tag"
            # Get commits since last tag
            commits=$(git log --pretty=format:"%s" ${latest_tag}..HEAD)
            # Extract current version numbers
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
          fi
          
          # Exit early if no commits to analyze
          if [ -z "$commits" ]; then
            echo "No commits to analyze"
            echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi
          
          # Count meaningful changes with more precise patterns
          major_bump=$(echo "$commits" | grep -cE "^(feat|fix|refactor|perf)!:" || true)
          minor_bump=$(echo "$commits" | grep -cE "^feat(\([^)]+\))?:" || true)
          patch_bump=$(echo "$commits" | grep -cE "^fix(\([^)]+\))?:" || true)
          
          # Calculate total meaningful changes
          meaningful_changes=$((major_bump + minor_bump + patch_bump))
          
          # Count total commits for logging
          total_commits=$(echo "$commits" | wc -l)
          
          echo "Commits analysis:"
          echo "Major changes (breaking): $major_bump"
          echo "Minor changes (features): $minor_bump"
          echo "Patch changes (fixes): $patch_bump"
          echo "Total meaningful changes: $meaningful_changes"
          echo "Total commits analyzed: $total_commits"
          
          # Determine if we should create a release
          if [ $meaningful_changes -gt 0 ]; then
            if [ $major_bump -gt 0 ]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [ $minor_bump -gt 0 ]; then
              minor=$((minor + 1))
              patch=0
            elif [ $patch_bump -gt 0 ]; then
              patch=$((patch + 1))
            else
              # If this is the first release, start with 0.1.0
              if [ -z "$latest_tag" ]; then
                minor=1
              fi
            fi
            
            new_tag="v$major.$minor.$patch"
            echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
            echo "Generated new tag: $new_tag"
            echo "SHOULD_RELEASE=true" >> $GITHUB_ENV
          else
            echo "No meaningful changes detected (no feat/fix/breaking changes)"
            echo "SHOULD_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create and push tag
        if: env.SHOULD_RELEASE == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}

      - name: Verify tag
        if: env.SHOULD_RELEASE == 'true'
        run: |
          # Verify the tag exists
          if ! git show-ref --tags ${{ env.NEW_TAG }} --quiet; then
            echo "Tag ${{ env.NEW_TAG }} not found"
            exit 1
          fi

      - name: Create Release with GoReleaser
        if: env.SHOULD_RELEASE == 'true'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: v2.6.1
          args: release --clean --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GORELEASER_CURRENT_TAG: ${{ env.NEW_TAG }} 